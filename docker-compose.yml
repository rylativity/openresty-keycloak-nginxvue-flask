version: '3.9'

services: 
  reverse_proxy:
    build: 
      context: ./nginx_reverse_proxy
      dockerfile: nginx.Dockerfile
    ports: 
      - 80:80
      - 443:443
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80']
    secrets:
       - ssl_cert
       - ssl_key
    restart: always
  postgres:
    image: postgres:13
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "keycloak"]
    restart: always
  keycloak:
    image: quay.io/keycloak/keycloak:19.0.1
    command: ["-Dkeycloak.frontendUrl=https://localhost/auth", "start-dev"]
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      KC_METRICS_ENABLED: "true"
    healthcheck:
      test: ["CMD", "curl","--fail","http://localhost:9990/health"]
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - 8080:8080
    #   - 8443:8443
    restart: always
    depends_on:
      - postgres
  vue-app:
    build:
      context: ./vue_app/
      dockerfile: vue.Dockerfile
    # ports:
    #   - "3000:80"
    restart: "always"
    healthcheck:
      test: ["CMD", "curl","--fail","localhost:80/health"]
      interval: 30s
      retries: 3
  flaskapp:
    build: 
      context: ./flask_app
      dockerfile: flaskapp.Dockerfile
    # ports: 
    #   - 5000:5000
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5000/api/hello']
      start_period: 7s
    restart: always
  
volumes:
  keycloak_postgres_data:
secrets:
  ssl_cert:
    file: certs/site.crt
  ssl_key:
    file: certs/site.key